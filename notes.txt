crafting interpreters notes:
parts of language-
- scanning (lexing)
- parsing (syntax gets grammar) (ast) (reporting syntax errors)

- static analysis (a+b, what do a and b refer to?) (binding -> scope)

statically typed languages - do type checking at compile-time
dynamically typed languages - do type checking at run-time
 
we need to store the analysis somewhere ? BOOKKEEPING
- as attributes to the nodes
- lookup(symbol) table off to the side
- a new data structure using the tree (ast)

FRONT END of the implementation^

Intermediate Representation: source -> ir -> final architecture
writing compilers for certain programs, if they all use same IR, less work

Optimization!
-constant folding

MIDDLE END ^

codegen
portable code (virtual machine code) (aka bytecode)
if using vm, after converting to bytecode, need to create mini-compiler to convert bytecode->machine

source -> ir -> bytecode -> machine code ~~~

Transpiler
instead of lang -> ir -> machine, we do lang -> other lang with already established compiler 
(translate my language to python)

compiler -> takes one source code, and converts to another (whether it be machine code or another language)
interpreter -> takes in source code and executes it immediately

some langs are both (cpythong executes immediately but has a compiler under the skin)
---------
